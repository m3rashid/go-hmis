// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: auth.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO auth (name, email,	password,	roles) 
VALUES ($1,	$2,	$3,	$4) RETURNING id, name, email, password, "emailVerified", profile, roles, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy"
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
	Roles    []int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		pq.Array(arg.Roles),
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Profile,
		pq.Array(&i.Roles),
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
UPDATE auth SET
	deleted = TRUE
WHERE email = $1 AND deleted = FALSE
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByEmail, email)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
UPDATE auth SET
	deleted = TRUE
WHERE id = $1 AND deleted = FALSE
`

func (q *Queries) DeleteUserById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getPaginatedPopulatedRoles = `-- name: GetPaginatedPopulatedRoles :many
SELECT role.id, role.name, role.description, role.workspace, role.permissions, role.deleted, role."createdAt", role."updatedAt", role."createdBy", role."updatedBy", workspace.name FROM role
INNER JOIN workspace ON role.workspace = workspace.id
ORDER BY role.id
LIMIT $1 OFFSET $2
`

type GetPaginatedPopulatedRolesParams struct {
	Limit  int32
	Offset int32
}

type GetPaginatedPopulatedRolesRow struct {
	ID          int64
	Name        string
	Description sql.NullString
	Workspace   sql.NullInt64
	Permissions json.RawMessage
	Deleted     bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
	CreatedBy   sql.NullInt64
	UpdatedBy   sql.NullInt64
	Name_2      string
}

func (q *Queries) GetPaginatedPopulatedRoles(ctx context.Context, arg GetPaginatedPopulatedRolesParams) ([]GetPaginatedPopulatedRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedPopulatedRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedPopulatedRolesRow
	for rows.Next() {
		var i GetPaginatedPopulatedRolesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Workspace,
			&i.Permissions,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedPopulatedUsers = `-- name: GetPaginatedPopulatedUsers :many
SELECT auth.id, auth.name, auth.email, auth.password, auth."emailVerified", auth.profile, auth.roles, auth.deleted, auth."createdAt", auth."updatedAt", auth."createdBy", auth."updatedBy", role.name FROM auth
INNER JOIN role ON auth.roles = role.id
ORDER BY auth.id
LIMIT $1 OFFSET $2
`

type GetPaginatedPopulatedUsersParams struct {
	Limit  int32
	Offset int32
}

type GetPaginatedPopulatedUsersRow struct {
	ID            int64
	Name          string
	Email         string
	Password      string
	EmailVerified bool
	Profile       sql.NullInt64
	Roles         []int64
	Deleted       bool
	CreatedAt     time.Time
	UpdatedAt     time.Time
	CreatedBy     sql.NullInt64
	UpdatedBy     sql.NullInt64
	Name_2        string
}

func (q *Queries) GetPaginatedPopulatedUsers(ctx context.Context, arg GetPaginatedPopulatedUsersParams) ([]GetPaginatedPopulatedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedPopulatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaginatedPopulatedUsersRow
	for rows.Next() {
		var i GetPaginatedPopulatedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.EmailVerified,
			&i.Profile,
			pq.Array(&i.Roles),
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedRoles = `-- name: GetPaginatedRoles :many
SELECT id, name, description, workspace, permissions, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM role
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetPaginatedRolesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPaginatedRoles(ctx context.Context, arg GetPaginatedRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Workspace,
			&i.Permissions,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedUsers = `-- name: GetPaginatedUsers :many
SELECT id, name, email, password, "emailVerified", profile, roles, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM auth
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetPaginatedUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPaginatedUsers(ctx context.Context, arg GetPaginatedUsersParams) ([]Auth, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.EmailVerified,
			&i.Profile,
			pq.Array(&i.Roles),
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedWorkspaces = `-- name: GetPaginatedWorkspaces :many
SELECT id, name, description, "colorCode", deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM workspace
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetPaginatedWorkspacesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPaginatedWorkspaces(ctx context.Context, arg GetPaginatedWorkspacesParams) ([]Workspace, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedWorkspaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workspace
	for rows.Next() {
		var i Workspace
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ColorCode,
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfileFromId = `-- name: GetProfileFromId :one
SELECT id, age, sex, "bloodGroup", weight, height, "authId", "profilePicture", designation, department, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM profile
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfileFromId(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileFromId, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Age,
		&i.Sex,
		&i.BloodGroup,
		&i.Weight,
		&i.Height,
		&i.AuthId,
		&i.ProfilePicture,
		&i.Designation,
		&i.Department,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getProfileFromUserId = `-- name: GetProfileFromUserId :one
SELECT id, age, sex, "bloodGroup", weight, height, "authId", "profilePicture", designation, department, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM profile
WHERE "authId" = $1 LIMIT 1
`

func (q *Queries) GetProfileFromUserId(ctx context.Context, authid sql.NullInt64) (Profile, error) {
	row := q.db.QueryRowContext(ctx, getProfileFromUserId, authid)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Age,
		&i.Sex,
		&i.BloodGroup,
		&i.Weight,
		&i.Height,
		&i.AuthId,
		&i.ProfilePicture,
		&i.Designation,
		&i.Department,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getRoleFromName = `-- name: GetRoleFromName :one
SELECT id, name, description, workspace, permissions, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM role
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetRoleFromName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleFromName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Workspace,
		&i.Permissions,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserAllDetailsFromIdOrEmail = `-- name: GetUserAllDetailsFromIdOrEmail :one
SELECT auth.id, auth.name, email, password, "emailVerified", profile, roles, auth.deleted, "createdAt", "updatedAt", "createdBy", "updatedBy", profile.id, age, sex, "bloodGroup", weight, height, "authId", "profilePicture", designation, department, profile.deleted, "createdAt", "updatedAt", "createdBy", "updatedBy", role.id, role.name, role.description, workspace, permissions, role.deleted, "createdAt", "updatedAt", "createdBy", "updatedBy", workspace.id, workspace.name, workspace.description, "colorCode", workspace.deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM auth
INNER JOIN profile ON auth.profile = profile.id
INNER JOIN role ON auth.roles = role.id
INNER JOIN workspace ON role.workspace = workspace.id
WHERE auth.id = $1 OR auth.email = $1
LIMIT 1
`

type GetUserAllDetailsFromIdOrEmailRow struct {
	ID             int64
	Name           string
	Email          string
	Password       string
	EmailVerified  bool
	Profile        sql.NullInt64
	Roles          []int64
	Deleted        bool
	CreatedAt      time.Time
	UpdatedAt      time.Time
	CreatedBy      sql.NullInt64
	UpdatedBy      sql.NullInt64
	ID_2           int64
	Age            sql.NullInt32
	Sex            interface{}
	BloodGroup     interface{}
	Weight         sql.NullInt32
	Height         sql.NullString
	AuthId         sql.NullInt64
	ProfilePicture sql.NullString
	Designation    sql.NullString
	Department     sql.NullString
	Deleted_2      bool
	CreatedAt_2    time.Time
	UpdatedAt_2    time.Time
	CreatedBy_2    sql.NullInt64
	UpdatedBy_2    sql.NullInt64
	ID_3           int64
	Name_2         string
	Description    sql.NullString
	Workspace      sql.NullInt64
	Permissions    json.RawMessage
	Deleted_3      bool
	CreatedAt_3    time.Time
	UpdatedAt_3    time.Time
	CreatedBy_3    sql.NullInt64
	UpdatedBy_3    sql.NullInt64
	ID_4           int64
	Name_3         string
	Description_2  sql.NullString
	ColorCode      string
	Deleted_4      bool
	CreatedAt_4    time.Time
	UpdatedAt_4    time.Time
	CreatedBy_4    sql.NullInt64
	UpdatedBy_4    sql.NullInt64
}

func (q *Queries) GetUserAllDetailsFromIdOrEmail(ctx context.Context, id int64) (GetUserAllDetailsFromIdOrEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAllDetailsFromIdOrEmail, id)
	var i GetUserAllDetailsFromIdOrEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Profile,
		pq.Array(&i.Roles),
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.ID_2,
		&i.Age,
		&i.Sex,
		&i.BloodGroup,
		&i.Weight,
		&i.Height,
		&i.AuthId,
		&i.ProfilePicture,
		&i.Designation,
		&i.Department,
		&i.Deleted_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.CreatedBy_2,
		&i.UpdatedBy_2,
		&i.ID_3,
		&i.Name_2,
		&i.Description,
		&i.Workspace,
		&i.Permissions,
		&i.Deleted_3,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
		&i.CreatedBy_3,
		&i.UpdatedBy_3,
		&i.ID_4,
		&i.Name_3,
		&i.Description_2,
		&i.ColorCode,
		&i.Deleted_4,
		&i.CreatedAt_4,
		&i.UpdatedAt_4,
		&i.CreatedBy_4,
		&i.UpdatedBy_4,
	)
	return i, err
}

const getUserFromEmail = `-- name: GetUserFromEmail :one
SELECT id, name, email, password, "emailVerified", profile, roles, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM auth
WHERE email = $1 AND deleted = FALSE LIMIT 1
`

func (q *Queries) GetUserFromEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getUserFromEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Profile,
		pq.Array(&i.Roles),
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserFromId = `-- name: GetUserFromId :one
SELECT id, name, email, password, "emailVerified", profile, roles, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM auth
WHERE id = $1 AND deleted = FALSE LIMIT 1
`

func (q *Queries) GetUserFromId(ctx context.Context, id int64) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getUserFromId, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Profile,
		pq.Array(&i.Roles),
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getWorkspaceFromName = `-- name: GetWorkspaceFromName :one
SELECT id, name, description, "colorCode", deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM workspace
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetWorkspaceFromName(ctx context.Context, name string) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspaceFromName, name)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ColorCode,
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const searchUsersFromNameOrEmail = `-- name: SearchUsersFromNameOrEmail :many
SELECT id, name, email, password, "emailVerified", profile, roles, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy" FROM auth
WHERE name LIKE $1 OR email LIKE $1
`

func (q *Queries) SearchUsersFromNameOrEmail(ctx context.Context, name string) ([]Auth, error) {
	rows, err := q.db.QueryContext(ctx, searchUsersFromNameOrEmail, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Auth
	for rows.Next() {
		var i Auth
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.EmailVerified,
			&i.Profile,
			pq.Array(&i.Roles),
			&i.Deleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unDeleteUserByEmail = `-- name: UnDeleteUserByEmail :exec
UPDATE auth SET
	deleted = FALSE
WHERE email = $1 AND deleted = TRUE
`

func (q *Queries) UnDeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, unDeleteUserByEmail, email)
	return err
}

const unDeleteUserById = `-- name: UnDeleteUserById :exec
UPDATE auth SET
	deleted = FALSE
WHERE id = $1 AND deleted = TRUE
`

func (q *Queries) UnDeleteUserById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unDeleteUserById, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE auth SET
	name = $2,
	email = $3,
	password = $4,
	profile = $5,
	"emailVerified" = $6,
	roles = $7
WHERE id = $1 AND deleted = FALSE RETURNING id, name, email, password, "emailVerified", profile, roles, deleted, "createdAt", "updatedAt", "createdBy", "updatedBy"
`

type UpdateUserParams struct {
	ID            int64
	Name          string
	Email         string
	Password      string
	Profile       sql.NullInt64
	EmailVerified bool
	Roles         []int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Profile,
		arg.EmailVerified,
		pq.Array(arg.Roles),
	)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.Profile,
		pq.Array(&i.Roles),
		&i.Deleted,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
